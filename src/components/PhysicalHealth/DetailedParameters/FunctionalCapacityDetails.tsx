import React, { useState } from 'react';
import {Edit3, Save, Info } from 'lucide-react';

interface FunctionalCapacityDetailsProps {
  isAdmin?: boolean;
  isEditMode?: boolean;
}

const FunctionalCapacityDetails: React.FC<FunctionalCapacityDetailsProps> = ({ 
  isAdmin = false, 
  isEditMode = false 
}) => {
  const [editingField, setEditingField] = useState<string | null>(null);
  const [showInfoCard, setShowInfoCard] = useState<string | null>(null);
  const [handgripData, setHandgripData] = useState({
    right: 42.1,
    left: 37.4
  });
  const [ruffierData, setRuffierData] = useState({
    score: 8.2
  });

  const getMetricStyle = (type: 'handgrip' | 'ruffier', value: number) => {
    let borderColor = 'border-gray-100';
    let textColor = 'text-gray-900';

    if (type === 'handgrip') {
      if (value < 34.7) {
        borderColor = 'border-red-400';
        textColor = 'text-red-600';
      } else if (value >= 34.7 && value <= 54.5) {
        borderColor = 'border-yellow-400';
        textColor = 'text-yellow-600';
      } else {
        borderColor = 'border-green-400';
        textColor = 'text-green-600';
      }
    } else if (type === 'ruffier') {
      if (value >= 0 && value <= 5) {
        borderColor = 'border-green-400';
        textColor = 'text-green-600';
      } else if (value > 5 && value <= 10) {
        borderColor = 'border-lime-400';
        textColor = 'text-lime-600';
      } else if (value > 10 && value <= 15) {
        borderColor = 'border-yellow-400';
        textColor = 'text-yellow-600';
      } else if (value > 15 && value <= 20) {
        borderColor = 'border-orange-400';
        textColor = 'text-orange-600';
      } else {
        borderColor = 'border-red-400';
        textColor = 'text-red-600';
      }
    }
    return { borderColor, textColor };
  };

  // Info card content
  const infoContent = {
    handgrip: {
      title: "Handgrip Strength",
      description: "Handgrip strength is a reliable indicator of overall muscle strength and functional capacity. It's measured using a dynamometer and reflects the maximum force that can be generated by the hand and forearm muscles. Strong grip strength is associated with better overall health, longevity, and reduced risk of cardiovascular disease."
    },
    ruffier: {
      title: "Ruffier-Dickson Index",
      description: "The Ruffier-Dickson test evaluates cardiovascular recovery after physical effort. It measures heart rate before, immediately after, and one minute after performing 30 squats in 45 seconds. The index indicates how efficiently the cardiovascular system recovers from exercise, reflecting overall cardiac fitness and adaptation capacity."
    }
  };

  const InfoCard = ({ type }: { type: string }) => {
    const info = infoContent[type as keyof typeof infoContent];
    if (!info) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setShowInfoCard(null)}>
        <div className="bg-white rounded-xl shadow-2xl max-w-md mx-4 p-6" onClick={(e) => e.stopPropagation()}>
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">{info.title}</h3>
            <button
              onClick={() => setShowInfoCard(null)}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <p className="text-gray-600 leading-relaxed">{info.description}</p>
        </div>
      </div>
    );
  };
  return (
    <>
      {showInfoCard && <InfoCard type={showInfoCard} />}
      {/* Handgrip Strength and Ruffier-Dickson Cards */}
      {/* We can resize it to 2 columns if needed */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Handgrip Strength Card */}
        <div className={
          `bg-white rounded-xl shadow-lg border ${getMetricStyle('handgrip', handgripData.left).borderColor} overflow-hidden`
        }>
          {/* Header */}
          <div className="bg-gradient-to-r from-gray-50 to-white px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Handgrip Strength</h3>
                  <p className="text-sm text-gray-600">Functional muscle strength</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setShowInfoCard('handgrip')}
                  className="text-gray-400 hover:text-blue-600 transition-colors p-1"
                >
                  <Info className="w-4 h-4" />
                </button>
                {isAdmin && isEditMode && (
                  <button
                    onClick={() => setEditingField(editingField === 'handgrip' ? null : 'handgrip')}
                    className="text-blue-600 hover:text-blue-800 p-1"
                  >
                    {editingField === 'handgrip' ? <Save className="w-4 h-4" /> : <Edit3 className="w-4 h-4" />}
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="p-6 flex flex-col">
            {/* Primary Metric */}
            <div className="flex items-center justify-center mb-6">
              <div className="flex items-center space-x-8">
                <div className="text-center">
                  {isAdmin && isEditMode && editingField === 'handgrip' ? (
                    <div className="space-y-2">
                      <input
                        type="number"
                        step="0.1"
                        value={handgripData.right}
                        onChange={(e) => setHandgripData(prev => ({ ...prev, right: parseFloat(e.target.value) }))}
                        className="w-20 text-4xl font-bold text-yellow-600 text-center border-b-2 border-gray-300 bg-transparent focus:outline-none focus:border-blue-600"
                      />
                      <div className="text-sm text-gray-500 font-medium">kg (Left)</div>
                    </div>
                  ) : (
                    <>
                      <div className={`text-4xl font-bold ${getMetricStyle('handgrip', handgripData.left).textColor} mb-1`}>{handgripData.left}</div>
                      <div className="text-sm text-gray-500 font-medium">kg (Left)</div>
                    </>
                  )}
                </div>
                <div className="text-center">
                  {isAdmin && isEditMode && editingField === 'handgrip' ? (
                    <div className="space-y-2">
                      <input
                        type="number"
                        step="0.1"
                        value={handgripData.left}
                        onChange={(e) => setHandgripData(prev => ({ ...prev, left: parseFloat(e.target.value) }))}
                        className="w-20 text-4xl font-bold text-yellow-600 text-center border-b-2 border-gray-300 bg-transparent focus:outline-none focus:border-blue-600"
                      />
                      <div className="text-sm text-gray-500 font-medium">kg (Right)</div>
                    </div>
                  ) : (
                    <>
                      <div className={`text-4xl font-bold ${getMetricStyle('handgrip', handgripData.right).textColor} mb-1`}>{handgripData.right}</div>
                      <div className="text-sm text-gray-500 font-medium">kg (Right)</div>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Reference Ranges for Age 45-49 Male */}
            <div className="space-y-3 mb-6">
              <div className="text-sm font-medium text-gray-700 mb-2">Age-Specific Ranges (45-49 years, Male)</div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-red-400">
                <div className="text-sm text-red-700 font-medium">&lt; 34.7 kg</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-red-500 mr-2"></div>
                  <span className="text-sm font-medium text-red-800">Weak</span>
                </div>
              </div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-yellow-400">
                <div className="text-sm text-yellow-700 font-medium">34.7 - 54.5 kg</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-yellow-500 mr-2"></div>
                  <span className="text-sm font-medium text-yellow-800">Normal</span>
                </div>
              </div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-green-400">
                <div className="text-sm text-green-700 font-medium">&gt; 54.5 kg</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-green-500 mr-2"></div>
                  <span className="text-sm font-medium text-green-800">Strong</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Ruffier-Dickson Recovery Test Card */}
        <div className={
          `bg-white rounded-xl shadow-lg border ${getMetricStyle('ruffier', ruffierData.score).borderColor} overflow-hidden`
        }>
          {/* Header */}
          <div className="bg-gradient-to-r from-gray-50 to-white px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Ruffier-Dickson Index</h3>
                  <p className="text-sm text-gray-600">Cardiovascular recovery</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setShowInfoCard('ruffier')}
                  className="text-gray-400 hover:text-blue-600 transition-colors p-1"
                >
                  <Info className="w-4 h-4" />
                </button>
                {isAdmin && isEditMode && (
                  <button
                    onClick={() => setEditingField(editingField === 'ruffier' ? null : 'ruffier')}
                    className="text-blue-600 hover:text-blue-800 p-1"
                  >
                    {editingField === 'ruffier' ? <Save className="w-4 h-4" /> : <Edit3 className="w-4 h-4" />}
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="p-6">
            {/* Primary Metric */}
            <div className="flex items-center justify-center mb-6">
              <div className="flex items-center space-x-4">
                <div className="text-center">
                  {isAdmin && isEditMode && editingField === 'ruffier' ? (
                    <div className="space-y-2">
                      <input
                        type="number"
                        step="0.1"
                        value={ruffierData.score}
                        onChange={(e) => setRuffierData(prev => ({ ...prev, score: parseFloat(e.target.value) }))}
                        className="w-20 text-4xl font-bold text-green-600 text-center border-b-2 border-gray-300 bg-transparent focus:outline-none focus:border-blue-600"
                      />
                      <div className="text-sm text-gray-500 font-medium">RDI Score</div>
                    </div>
                  ) : (
                    <>
                      <div className={`text-4xl font-bold ${getMetricStyle('ruffier', ruffierData.score).textColor} mb-1`}>{ruffierData.score}</div>
                      <div className="text-sm text-gray-500 font-medium">RDI Score</div>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Reference Ranges */}
            <div className="space-y-3 mb-6">
              <div className="text-sm font-medium text-gray-700 mb-2">Cardiovascular Condition Categories</div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-green-800">
                <div className="text-sm text-green-700 font-medium">0 - 5</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-green-500 mr-2"></div>
                  <span className="text-sm font-medium text-green-800">Very Good</span>
                </div>
              </div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-green-400">
                <div className="text-sm text-lime-700 font-medium">5 - 10</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-lime-500 mr-2"></div>
                  <span className="text-sm font-medium text-lime-800">Good</span>
                </div>
              </div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-yellow-400">
                <div className="text-sm text-yellow-700 font-medium">10 - 15</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-yellow-500 mr-2"></div>
                  <span className="text-sm font-medium text-yellow-800">Moderate</span>
                </div>
              </div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-orange-400">
                <div className="text-sm text-orange-700 font-medium">15 - 20</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-orange-500 mr-2"></div>
                  <span className="text-sm font-medium text-orange-800">Weak</span>
                </div>
              </div>
              
              <div className="flex items-center justify-start gap-x-4 py-2 px-3 bg-gradient-to-r from-gray-50 to-white rounded-lg border-l-4 border-red-400">
                <div className="text-sm text-red-700 font-medium">&gt; 20</div>
                <div className="flex items-center space-x-1">
                  <div className="w-4 h-px bg-red-500 mr-2"></div>
                  <span className="text-sm font-medium text-red-800">Poor</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default FunctionalCapacityDetails; 